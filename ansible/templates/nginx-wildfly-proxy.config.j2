

server {

        listen 80;
        listen [::]:80;

        server_name {{ domain_name }};

        return 301 https://{{ domain_name }}$request_uri;
}

server {

        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name {{ domain_name }};

        client_max_body_size 64m;
    ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem; # managed by Certbot

        # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
        # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
        # other regex checks, because in our other config files have regex rule that denies access to files with dotted names.
        location ^~ /.well-known/acme-challenge/ {

            # Set correct content type. According to this:
            # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
            # Current specification requires "text/plain" or no content header at all.
            # It seems that "text/plain" is a safe option.
            default_type "text/plain";

            # This directory must be the same as in /etc/letsencrypt/cli.ini
            # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
            # there to "webroot".
            # Do NOT use alias, use root! Target directory is located here:
            # /var/www/common/letsencrypt/.well-known/acme-challenge/
            root         /var/www/letsencrypt;
        }

        # Hide /acme-challenge subdirectory and return 404 on all requests.
        # It is somewhat more secure than letting Nginx return 403.
        # Ending slash is important!
        location = /.well-known/acme-challenge/ {
            return 404;
        }


        location / {
            proxy_pass http://localhost:8080/{{ wildfly_path_name }}/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 1200s;
            proxy_read_timeout 1200s;
        }

}